generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  espnId         String   @id // ESPN's team ID as primary key
  abbreviation   String   @unique
  name           String
  city           String
  conference     String
  division       String
  
  // Branding fields
  primaryColor    String?   // "008348" for Celtics green
  alternateColor  String?   // "ffffff" for Celtics white
  logoUrl         String?   // ESPN logo URL
  logoDarkUrl     String?   // Dark version logo URL
  logoScoreboardUrl String? // Scoreboard version logo URL
  
  // ESPN metadata
  espnUid        String?   // ESPN's unique identifier
  espnSlug       String?   // "boston-celtics"
  displayName    String?   // "Boston Celtics"
  shortDisplayName String? // "Celtics"
  nickname       String?   // "Boston"
  
  // Team status
  isActive       Boolean?  @default(true)
  isAllStar      Boolean?  @default(false)
  
  // ESPN links (stored as JSON)
  espnLinks      Json?     // Array of useful URLs
  
  // Sync tracking
  lastSynced     DateTime  @default(now())
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relation
  players      Player[] @relation("TeamPlayers")
  homeGames    Game[]   @relation("HomeTeam")
  awayGames    Game[]   @relation("AwayTeam")
  playTags     PlayTag[]
  favoriteBy   User[]   @relation("UserFavoriteTeams")
  teamGameStats TeamGameStat[]
  playerGameStats PlayerGameStat[]

  @@map("teams")
} 

model Player {
  espnId           String   @id // ESPN's player ID as primary key
  name             String
  position         String
  teamEspnId       String? // Foreign key to Team.espnId
  height           String? // Restore to String?
  weight           Int?
  birthDate        DateTime?
  college          String?
  draftYear        Int?
  draftRound       Int?
  draftNumber      Int?
  jerseyNumber     String?
  
  // ESPN metadata
  espnUid          String?   // ESPN's unique identifier
  espnSlug         String?   // "luka-doncic"
  firstName        String?   // "Luka"
  lastName         String?   // "Doncic"
  shortName        String?   // "L. Doncic"
  fullName         String?   // "Luka Doncic"
  
  // ESPN player details
  displayHeight    String?   // "6'7\""
  displayWeight    String?   // "230 lbs"
  age              Int?      // 26
  experience       Int?      // Years in league
  dateOfBirth      DateTime? // Full birth date
  birthPlace       String?   // "Ljubljana, Slovenia"
  debutYear        Int?      // First year in league
  headshot         String?   // ESPN headshot URL
  status           String?   // "Active", "Injured", etc.
  
  // Core API specific fields
  active           Boolean?  @default(true)  // Player active status
  slug             String?   // URL slug
  espnGuid         String?   // ESPN GUID
  collegeAthlete   Boolean?  @default(false) // Is college athlete
  hasStatistics    Boolean?  @default(false) // Has statistics available
  
  // ESPN data
  injuries         Json?     // Injury information
  contract         Json?     // Current contract details
  contracts        Json?     // All contract history
  alternateIds     Json?     // Other ID systems
  espnLinks        Json?     // ESPN links and URLs
  
  // Sync tracking
  lastSynced       DateTime  @default(now())
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  team             Team?    @relation("TeamPlayers", fields: [teamEspnId], references: [espnId])
  playTags         PlayTag[]
  ballHandlerPlays Play[]  @relation("BallHandler")
  primaryPlays     Play[]   @relation("PrimaryPlayer")
  secondaryPlays   Play[]   @relation("SecondaryPlayer")
  predictions      Prediction[]
  favoriteBy       User[]   @relation("UserFavoritePlayers")
  playerGameStats PlayerGameStat[]

  @@map("players")
}

model Game {
  espnId         String   @id // ESPN's game ID as primary key
  date           DateTime
  homeTeamId     String // ESPN team ID
  awayTeamId     String // ESPN team ID
  homeScore      Int?
  awayScore      Int?
  status         GameStatus
  quarter        Int        @default(1)
  timeRemaining  String?
  attendance     Int?
  arena          String?
  season         String     // "2023-24"
  lastSynced     DateTime   @default(now()) // Track when last synced from ESPN
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  homeTeam       Team       @relation("HomeTeam", fields: [homeTeamId], references: [espnId])
  awayTeam       Team       @relation("AwayTeam", fields: [awayTeamId], references: [espnId])
  plays          Play[]
  viewers        GameViewer[]
  playerGameStats PlayerGameStat[]
  teamGameStats TeamGameStat[]

  @@map("games")
}

model Play {
  id              String       @id @default(cuid())
  gameId          String       // ESPN game ID
  timestamp       DateTime     @default(now())
  gameTime        String
  quarter         Int
  description     String?
  timeInQuarter   String?
  possession      Possession?
  playType        PlayType?
  ballLocation    BallLocation?
  ballHandlerId   String?       // ESPN player ID
  primaryPlayerId String?       // ESPN player ID
  secondaryPlayerId String?     // ESPN player ID
  result          PlayResult?
  points          Int?
  createdById     String
  
  // Metadata
  isVerified      Boolean      @default(false) // Multiple users tagged same play
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  game            Game         @relation(fields: [gameId], references: [espnId])
  ballHandler     Player?      @relation("BallHandler", fields: [ballHandlerId], references: [espnId])
  primaryPlayer   Player?      @relation("PrimaryPlayer", fields: [primaryPlayerId], references: [espnId])
  secondaryPlayer Player?      @relation("SecondaryPlayer", fields: [secondaryPlayerId], references: [espnId])
  tags            PlayTag[]
  predictions     Prediction[]
  createdBy       User         @relation("UserPlays", fields: [createdById], references: [id])

  @@map("plays")
}

model Tag {
  id              String       @id @default(cuid())
  name            String       @unique // "High Pick and Roll", "Drop Coverage"
  category        TagCategory
  subcategory     String?      // "PnR", "ISO", "Post", etc.
  description     String?
  icon            String?      // "üèÄ", ""
  color           String?      // "#FF6B6B"
  
  // Basketball Glossary/Education
  glossaryEntry   GlossaryEntry?
  
  // Predictive Properties
  triggers        Json?        // What actions trigger this tag
  suggestions     Json?        // What tags typically follow this
  isActive        Boolean      @default(true)
  usageCount      Int          @default(0)
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  playTags        PlayTag[]
  predictions     Prediction[]

  @@map("tags")
}

// Basketball Glossary/Education System
model GlossaryEntry {
  id              String       @id @default(cuid())
  tagId           String       @unique
  title           String       // "Drop Coverage"
  definition      String       // "A defensive strategy where..."
  explanation     String       // Detailed explanation with examples
  videoUrl        String?      // Link to video example
  imageUrl        String?      // Diagram or screenshot
  difficulty      Difficulty   @default(BEGINNER)
  relatedTerms    String[]     // ["Switch", "Hedge", "Trap"]
  examples        Json?        // Example plays/scenarios
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  tag             Tag          @relation(fields: [tagId], references: [id])

  @@map("glossary_entries")
}

model PlayTag {
  id              String       @id @default(cuid())
  playId          String       // Play.id
  tagId           String
  playerId        String?      // ESPN player ID
  teamId          String?      // ESPN team ID
  context         Json?
  confidence      Float        @default(1.0)
  createdById     String
  createdAt       DateTime     @default(now())
  // Relations
  play            Play         @relation(fields: [playId], references: [id])
  tag             Tag          @relation(fields: [tagId], references: [id])
  player          Player?      @relation(fields: [playerId], references: [espnId])
  team            Team?        @relation(fields: [teamId], references: [espnId])
  createdBy       User         @relation("UserPlayTags", fields: [createdById], references: [id])
  @@unique([playId, tagId, playerId, createdById])
  @@map("play_tags")
}

model Prediction {
  id              String       @id @default(cuid())
  playId          String       // Play.id
  tagId           String
  playerId        String?      // ESPN player ID
  confidence      Float        // 0.0 to 1.0
  context         Json
  isCorrect       Boolean?
  createdById     String
  createdAt       DateTime     @default(now())
  // Relations
  play            Play         @relation(fields: [playId], references: [id])
  tag             Tag          @relation(fields: [tagId], references: [id])
  player          Player?      @relation(fields: [playerId], references: [espnId])
  createdBy       User         @relation("UserPredictions", fields: [createdById], references: [id])
  @@map("predictions")
}

// Basketball-Specific Enums
enum GameStatus {
  SCHEDULED
  LIVE
  FINISHED
  CANCELLED
  POSTPONED
}

enum Possession {
  OFFENSE
  DEFENSE
}

enum PlayType {
  SET_PLAY
  TRANSITION
  SPECIAL
  FREE_THROW
  REBOUND
}

enum BallLocation {
  TOP_KEY
  WING_LEFT
  WING_RIGHT
  CORNER_LEFT
  CORNER_RIGHT
  POST_LEFT
  POST_RIGHT
  PAINT
  PERIMETER
}

enum PlayResult {
  MADE_2
  MADE_3
  MISSED_2
  MISSED_3
  TURNOVER
  FOUL
  REBOUND_OFFENSIVE
  REBOUND_DEFENSIVE
  ASSIST
  BLOCK
  STEAL
}

enum TagCategory {
  OFFENSIVE_ACTION
  DEFENSIVE_ACTION
  TRANSITION
  SET_PLAY
  SPECIAL_SITUATION
  PLAYER_ACTION
  TEAM_ACTION
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  username        String       @unique
  password        String       // Hashed password
  firstName       String?
  lastName        String?
  avatar          String?      // Profile picture URL
  bio             String?      // User bio
  isActive        Boolean      @default(true)
  role            UserRole     @default(USER)
  emailVerified   Boolean      @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // User Preferences
  favoriteTeams   Team[]       @relation("UserFavoriteTeams")
  favoritePlayers Player[]     @relation("UserFavoritePlayers")
  
  // User Activity
  plays           Play[]       @relation("UserPlays")
  playTags        PlayTag[]    @relation("UserPlayTags")
  predictions     Prediction[] @relation("UserPredictions")
  gameViewers     GameViewer[]

  @@map("users")
}

model GameViewer {
  id              String       @id @default(cuid())
  gameId          String       // Game.espnId
  userId          String
  joinedAt        DateTime     @default(now())
  lastSeen        DateTime     @default(now())
  isActive        Boolean      @default(true)
  // Relations
  game            Game         @relation(fields: [gameId], references: [espnId])
  user            User         @relation(fields: [userId], references: [id])
  @@unique([gameId, userId])
  @@map("game_viewers")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model PlayerGameStat {
  id          String   @id @default(cuid())
  gameId      String   // ESPN game ID
  playerId    String   // ESPN player ID
  teamId      String   // ESPN team ID
  minutes     Int?
  points      Int?
  rebounds    Int?
  assists     Int?
  steals      Int?
  blocks      Int?
  turnovers   Int?
  fouls       Int?
  threesMade  Int?
  threesAtt   Int?
  fieldGoalsMade Int?
  fieldGoalsAtt Int?
  freeThrowsMade Int?
  freeThrowsAtt Int?
  plusMinus   Int?
  starter     Boolean? // true if started
  statsJson   Json?    // Raw ESPN stats for flexibility
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game        Game     @relation(fields: [gameId], references: [espnId])
  player      Player   @relation(fields: [playerId], references: [espnId])
  team        Team     @relation(fields: [teamId], references: [espnId])

  @@unique([gameId, playerId])
  @@map("player_game_stats")
}

model TeamGameStat {
  id          String   @id @default(cuid())
  gameId      String   // ESPN game ID
  teamId      String   // ESPN team ID
  points      Int?
  rebounds    Int?
  assists     Int?
  steals      Int?
  blocks      Int?
  turnovers   Int?
  fouls       Int?
  threesMade  Int?
  threesAtt   Int?
  fieldGoalsMade Int?
  fieldGoalsAtt Int?
  freeThrowsMade Int?
  freeThrowsAtt Int?
  statsJson   Json?    // Raw ESPN stats for flexibility
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  game        Game     @relation(fields: [gameId], references: [espnId])
  team        Team     @relation(fields: [teamId], references: [espnId])

  @@unique([gameId, teamId])
  @@map("team_game_stats")
}