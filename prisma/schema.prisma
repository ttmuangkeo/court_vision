generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  espnId            String           @id
  abbreviation      String           @unique
  name              String
  city              String
  conference        String
  division          String
  primaryColor      String?
  alternateColor    String?
  logoUrl           String?
  logoDarkUrl       String?
  logoScoreboardUrl String?
  espnUid           String?
  espnSlug          String?
  displayName       String?
  shortDisplayName  String?
  nickname          String?
  isActive          Boolean?         @default(true)
  isAllStar         Boolean?         @default(false)
  espnLinks         Json?
  lastSynced        DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  awayGames         Game[]           @relation("AwayTeam")
  homeGames         Game[]           @relation("HomeTeam")
  playTags          PlayTag[]
  playerGameStats   PlayerGameStat[]
  players           Player[]         @relation("TeamPlayers")
  defensivePlays    Play[]           @relation("DefensiveTeam")
  offensivePlays    Play[]           @relation("OffensiveTeam")
  teamContexts      TeamContext[]
  teamGameStats     TeamGameStat[]
  teamStatistics    TeamStatistics[]
  favoriteBy        User[]           @relation("UserFavoriteTeams")

  @@map("teams")
}

model Player {
  espnId           String           @id
  position         String
  teamEspnId       String?
  college          String?
  jerseyNumber     String?
  espnUid          String?
  espnSlug         String?
  firstName        String?
  lastName         String?
  shortName        String?
  fullName         String?
  displayHeight    String?
  displayWeight    String?
  age              Int?
  experience       Int?
  dateOfBirth      DateTime?
  birthPlace       String?
  debutYear        Int?
  headshot         String?
  status           String?
  injuries         Json?
  contract         Json?
  contracts        Json?
  alternateIds     Json?
  espnLinks        Json?
  lastSynced       DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  active           Boolean?         @default(true)
  collegeAthlete   Boolean?         @default(false)
  espnGuid         String?
  hasStatistics    Boolean?         @default(false)
  slug             String?
  avgAssists       Float?
  avgBlocks        Float?
  avgFouls         Float?
  avgPoints        Float?
  avgRebounds      Float?
  avgSteals        Float?
  avgTurnovers     Float?
  fieldGoalPct     Float?
  freeThrowPct     Float?
  gamesPlayed      Int?
  gamesStarted     Int?
  lastStatsSync    DateTime?
  minutesPerGame   Float?
  statsSummary     Json?
  threePointPct    Float?
  playTags         PlayTag[]
  playerGameStats  PlayerGameStat[]
  team             Team?            @relation("TeamPlayers", fields: [teamEspnId], references: [espnId])
  ballHandlerPlays Play[]           @relation("BallHandler")
  primaryPlays     Play[]           @relation("PrimaryPlayer")
  secondaryPlays   Play[]           @relation("SecondaryPlayer")
  predictions      Prediction[]
  favoriteBy       User[]           @relation("UserFavoritePlayers")

  @@map("players")
}

model Game {
  espnId          String           @id
  date            DateTime
  homeTeamId      String
  awayTeamId      String
  homeScore       Int?
  awayScore       Int?
  status          GameStatus
  quarter         Int              @default(1)
  timeRemaining   String?
  attendance      Int?
  arena           String?
  season          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastSynced      DateTime         @default(now())
  viewers         GameViewer[]
  awayTeam        Team             @relation("AwayTeam", fields: [awayTeamId], references: [espnId])
  homeTeam        Team             @relation("HomeTeam", fields: [homeTeamId], references: [espnId])
  playerGameStats PlayerGameStat[]
  plays           Play[]
  teamGameStats   TeamGameStat[]

  @@map("games")
}

model Play {
  id                String        @id @default(cuid())
  gameId            String
  timestamp         DateTime      @default(now())
  gameTime          String
  quarter           Int
  description       String?
  timeInQuarter     String?
  possession        Possession?
  playType          PlayType?
  ballLocation      BallLocation?
  ballHandlerId     String?
  primaryPlayerId   String?
  secondaryPlayerId String?
  result            PlayResult?
  points            Int?
  createdById       String
  isVerified        Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  defensiveTeamId   String?
  gameSituation     Json?
  offensiveTeamId   String?
  teamContext       Json?
  tags              PlayTag[]
  ballHandler       Player?       @relation("BallHandler", fields: [ballHandlerId], references: [espnId])
  createdBy         User          @relation("UserPlays", fields: [createdById], references: [id])
  defensiveTeam     Team?         @relation("DefensiveTeam", fields: [defensiveTeamId], references: [espnId])
  game              Game          @relation(fields: [gameId], references: [espnId])
  offensiveTeam     Team?         @relation("OffensiveTeam", fields: [offensiveTeamId], references: [espnId])
  primaryPlayer     Player?       @relation("PrimaryPlayer", fields: [primaryPlayerId], references: [espnId])
  secondaryPlayer   Player?       @relation("SecondaryPlayer", fields: [secondaryPlayerId], references: [espnId])
  predictions       Prediction[]
  teamContexts      TeamContext[]

  @@map("plays")
}

model TeamContext {
  id          String      @id @default(cuid())
  playId      String
  teamId      String
  contextType ContextType
  contextData Json
  confidence  Float       @default(1.0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  play        Play        @relation(fields: [playId], references: [id])
  team        Team        @relation(fields: [teamId], references: [espnId])

  @@unique([playId, teamId])
  @@map("team_contexts")
}

model Tag {
  id            String         @id @default(cuid())
  name          String         @unique
  category      TagCategory
  subcategory   String?
  description   String?
  icon          String?
  color         String?
  triggers      Json?
  suggestions   Json?
  isActive      Boolean        @default(true)
  usageCount    Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  glossaryEntry GlossaryEntry?
  playTags      PlayTag[]
  predictions   Prediction[]

  @@map("tags")
}

model GlossaryEntry {
  id           String     @id @default(cuid())
  tagId        String     @unique
  title        String
  definition   String
  explanation  String
  videoUrl     String?
  imageUrl     String?
  difficulty   Difficulty @default(BEGINNER)
  relatedTerms String[]
  examples     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@map("glossary_entries")
}

model PlayTag {
  id          String   @id @default(cuid())
  playId      String
  tagId       String
  playerId    String?
  teamId      String?
  context     Json?
  confidence  Float    @default(1.0)
  createdById String
  createdAt   DateTime @default(now())
  createdBy   User     @relation("UserPlayTags", fields: [createdById], references: [id])
  play        Play     @relation(fields: [playId], references: [id])
  player      Player?  @relation(fields: [playerId], references: [espnId])
  tag         Tag      @relation(fields: [tagId], references: [id])
  team        Team?    @relation(fields: [teamId], references: [espnId])

  @@unique([playId, tagId, playerId, createdById])
  @@map("play_tags")
}

model Prediction {
  id          String   @id @default(cuid())
  playId      String
  tagId       String
  playerId    String?
  confidence  Float
  context     Json
  isCorrect   Boolean?
  createdById String
  createdAt   DateTime @default(now())
  createdBy   User     @relation("UserPredictions", fields: [createdById], references: [id])
  play        Play     @relation(fields: [playId], references: [id])
  player      Player?  @relation(fields: [playerId], references: [espnId])
  tag         Tag      @relation(fields: [tagId], references: [id])

  @@map("predictions")
}

model User {
  id                 String       @id @default(cuid())
  email              String       @unique
  username           String       @unique
  password           String
  firstName          String?
  lastName           String?
  avatar             String?
  bio                String?
  isActive           Boolean      @default(true)
  role               UserRole     @default(USER)
  emailVerified      Boolean      @default(false)
  lastLoginAt        DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  onboardingComplete Boolean      @default(false)
  coachingRole       String?
  experienceLevel    String?
  teamLevel          String?
  gameViewers        GameViewer[]
  playTags           PlayTag[]    @relation("UserPlayTags")
  plays              Play[]       @relation("UserPlays")
  predictions        Prediction[] @relation("UserPredictions")
  favoritePlayers    Player[]     @relation("UserFavoritePlayers")
  favoriteTeams      Team[]       @relation("UserFavoriteTeams")

  @@map("users")
}

model GameViewer {
  id       String   @id @default(cuid())
  gameId   String
  userId   String
  joinedAt DateTime @default(now())
  lastSeen DateTime @default(now())
  isActive Boolean  @default(true)
  game     Game     @relation(fields: [gameId], references: [espnId])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([gameId, userId])
  @@map("game_viewers")
}

model PlayerGameStat {
  id             String   @id @default(cuid())
  gameId         String
  playerId       String
  teamId         String
  minutes        Int?
  points         Int?
  rebounds       Int?
  assists        Int?
  steals         Int?
  blocks         Int?
  turnovers      Int?
  fouls          Int?
  threesMade     Int?
  threesAtt      Int?
  fieldGoalsMade Int?
  fieldGoalsAtt  Int?
  freeThrowsMade Int?
  freeThrowsAtt  Int?
  plusMinus      Int?
  starter        Boolean?
  statsJson      Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  game           Game     @relation(fields: [gameId], references: [espnId])
  player         Player   @relation(fields: [playerId], references: [espnId])
  team           Team     @relation(fields: [teamId], references: [espnId])

  @@unique([gameId, playerId])
  @@map("player_game_stats")
}

model TeamGameStat {
  id                  String   @id @default(cuid())
  gameId              String
  teamId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  abbreviation        String?
  description         String?
  displayValue        String
  perGameDisplayValue String?
  perGameValue        Float?
  statName            String
  statType            String
  value               Float
  game                Game     @relation(fields: [gameId], references: [espnId])
  team                Team     @relation(fields: [teamId], references: [espnId])

  @@unique([gameId, teamId, statType, statName])
  @@map("team_game_stats")
}

model TeamStatistics {
  id                  String   @id @default(cuid())
  teamId              String
  season              String
  seasonType          String
  category            String
  statName            String
  displayName         String
  shortDisplayName    String
  description         String?
  abbreviation        String
  value               Float
  displayValue        String
  perGameValue        Float?
  perGameDisplayValue String?
  lastSynced          DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  team                Team     @relation(fields: [teamId], references: [espnId])

  @@unique([teamId, season, seasonType, category, statName])
  @@map("team_statistics")
}

enum GameStatus {
  SCHEDULED
  LIVE
  FINISHED
  CANCELLED
  POSTPONED
}

enum Possession {
  OFFENSE
  DEFENSE
}

enum PlayType {
  SET_PLAY
  TRANSITION
  SPECIAL
  FREE_THROW
  REBOUND
}

enum BallLocation {
  TOP_KEY
  WING_LEFT
  WING_RIGHT
  CORNER_LEFT
  CORNER_RIGHT
  POST_LEFT
  POST_RIGHT
  PAINT
  PERIMETER
}

enum PlayResult {
  MADE_2
  MADE_3
  MISSED_2
  MISSED_3
  TURNOVER
  FOUL
  REBOUND_OFFENSIVE
  REBOUND_DEFENSIVE
  ASSIST
  BLOCK
  STEAL
}

enum TagCategory {
  OFFENSIVE_ACTION
  DEFENSIVE_ACTION
  TRANSITION
  SET_PLAY
  SPECIAL_SITUATION
  PLAYER_ACTION
  TEAM_ACTION
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ContextType {
  DEFENSIVE_SCHEME
  OFFENSIVE_PATTERN
  PLAYER_ROTATION
  TIMEOUT_STRATEGY
  END_OF_GAME
  MOMENTUM_SHIFT
  MATCHUP_ADVANTAGE
  TENDENCY_RECOGNITION
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}
